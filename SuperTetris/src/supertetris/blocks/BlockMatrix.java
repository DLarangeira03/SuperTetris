/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package supertetris.blocks;

import java.awt.Graphics;
import javax.swing.JPanel;
import supertetris.gui.Drawable;

/**
 *creates a block matrix
 * @author diogo
 */
public class BlockMatrix extends JPanel implements Drawable {

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        draw(g, 0, 0, getWidth(), getHeight());
    }

    @Override
    public void draw(Graphics gr, int px, int py, int width, int height) {
        gr.fillRect(px, py, width, height);
        int sizeX = width / getColumns();
        int sizeY = height / getLines();
        for (int y = 0; y < getLines(); y++) {
            for (int x = 0; x < getColumns(); x++) {
                matrix[y][x].draw(gr, px + x * sizeX, py + y * sizeY, sizeX, sizeY);
            }
        }
    }
    
    //acessible by inheritance  
    protected Block[][] matrix;

    /**
     * constructor with parameters with a strong relation (agregation) 
     * constructor makes a clone of the matrix in the parameter
     *
     * @param matrix original blocks
     */
    public BlockMatrix(Block[][] matrix) {
        //dimension of the orignal matrix
        int lines = matrix.length;
        int cols = matrix[0].length;
        //initialize array
        this.matrix = new Block[lines][cols];
        //clone all blocks
        for (int y = 0; y < lines; y++) {
            for (int x = 0; x < cols; x++) {
                //calls getClone of each block
                this.matrix[y][x] = matrix[y][x].getClone();

            }

        }
    }
    
    /**
     * copy constructor
     * @param original 
     */
    public BlockMatrix(BlockMatrix original) {
        this(original.matrix);
    }
    
    /**
     * default constructor
     */
    public BlockMatrix() {
        this(new Block[][]{
            {new Empty()}
        }
        );
    }

    public Block[][] getMatrix() {
        return matrix;
    }

    public int getLines() {
        return matrix.length;
    }

    public int getColumns() {
        return matrix[0].length;
    }
    
    /**
     * to String
     * @return 
     */
    @Override
    public String toString() {
        //devia utilizar um stringbuilder
        String txt = "";
        for (Block[] blocks : matrix) {
            for (Block block : blocks) {
                txt += block.toString();
            }
            txt += "\n";
        }
        return txt;
    }
    
    /**
     * creates a BlockMatrix clone
     * @return 
     */
    public BlockMatrix getClone() {
        return new BlockMatrix(this);
    }
    
    /**
     * rotates the matrix
     */
    public void rotate() {
        this.matrix = rotateMatrix(matrix);
    }

    /**
     * generated by chatgpt
     *
     * @param matriz
     * @return rotated matrix
     */
    private static Block[][] rotateMatrix(Block[][] matriz) {
        // creates a new inverted matrix 
        Block[][] transposta = new Block[matriz[0].length][matriz.length];
        for (int y = 0; y < matriz.length; y++) {
            for (int x = 0; x < matriz[y].length; x++) {
                transposta[x][matriz.length - y - 1] = matriz[y][x];
            }
        }

        return transposta;
    }

}
